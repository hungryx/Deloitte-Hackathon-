import sys
from json import dumps
from flask import Flask, request
from flask_cors import CORS
from auth import auth_login, auth_logout, auth_register
from channel import channel_invite, channel_details, channel_messages, channel_leave, channel_join, channel_addowner, channel_removeowner
from channels import channels_list, channels_listall, channels_create
# from message import message_send, message_sendlater, message_react, message_unreact, message_pin, message_unpin, message_remove, message_edit
# from user import user_profile, user_setname, user_setemail, user_sethandle
# from other import users_all, search
# from standup import standup_start, standup_active, standup_send

def defaultHandler(err):
    response = err.get_response()
    print('response', err, err.get_response())
    response.data = dumps({
        "code": err.code,
        "name": "System Error",
        "message": err.get_description(),
    })
    response.content_type = 'application/json'
    return response

APP = Flask(__name__)
CORS(APP)

APP.config['TRAP_HTTP_EXCEPTIONS'] = True
APP.register_error_handler(Exception, defaultHandler)

@APP.route("/login", methods=['POST'])
def login():
    data = request.get_json()
    try:
        result = auth_login(data['email'], data['password'])
        return dumps(result)
    except Exception as err:
        defaultHandler(err)

@APP.route("/logout", methods=['POST'])
def logout():
    data = request.get_json()
    if auth_logout(data['token']):
        return dumps({'token' : None})
    return dumps({})

@APP.route("/register", methods=['POST'])
def register():
    data = request.get_json()
    try:
        result = auth_register(
            data['email'],
            data['password'],
            data['name_first'],
            data['name_last']
            )
        return dumps(result)
    except Exception as err:
        defaultHandler(err)

@APP.route("/invite", methods=['POST'])
def invite():
    data = request.get_json()
    try:
        channel_invite(data['token'], data['channel_id'], data['u_id'])
        return dumps({})
    except Exception as err:
        defaultHandler(err)

@APP.route("/details", methods=['GET'])
def details():
    token = request.args.get('token')
    channel_id = request.args.get('channel_id')
    try:
        result = channel_details(token, channel_id)
        return dumps(result)
    except Exception as err:
        defaultHandler(err)

@APP.route("/messages", methods=['GET'])
def messages():
    token = request.args.get('token')
    channel_id = request.args.get('channel_id')
    start = request.args.get('start')
    try:
        result = channel_messages(token, channel_id, start)
        return dumps(result)
    except Exception as err:
        defaultHandler(err)

@APP.route("/leave", methods=['POST'])
def leave():
    data = request.get_json()
    try:
        channel_leave(data['token'], data['channel_id'])
        return dumps({})
    except Exception as err:
        defaultHandler(err)

@APP.route("/join", methods=['POST'])
def join():
    data = request.get_json()
    try:
        channel_join(data['token'], data['channel_id'])
        return dumps({})
    except Exception as err:
        defaultHandler(err)

@APP.route("/addowner", methods=['POST'])
def addowner():
    data = request.get_json()
    try:
        channel_addowner(data['token'], data['channel_id'], data['u_id'])
        return dumps({})
    except Exception as err:
        defaultHandler(err)

@APP.route("/removeowner", methods=['POST'])
def removeowner():
    data = request.get_json()
    try:
        channel_removeowner(data['token'], data['channel_id'], data['u_id'])
        return dumps({})
    except Exception as err:
        defaultHandler(err)

@APP.route("/list", methods=['GET'])
def clist():
    token = request.args.get('token')
    try:
        result = channels_list(token)
        return dumps(result)
    except Exception as err:
        defaultHandler(err)

@APP.route("/listall", methods=['GET'])
def listall():
    token = request.args.get('token')
    try:
        result = channels_listall(token)
        return dumps(result)
    except Exception as err:
        defaultHandler(err)

if __name__ == "__main__":
    APP.run(port=(int(sys.argv[1]) if len(sys.argv) == 2 else 8080))
