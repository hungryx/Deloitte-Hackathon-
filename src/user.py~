'''
Implementation of user functions ignoring flash stuff
'''
import re
import website_data as wd
from error import InputError, AccessError

# ******** Helper Functions for channel ***************
def get_user_id_and_user_data(token):
    '''
    This is a helper function that gets the user_id and user data from website data
    given a token and channel id
    Raises input errors if invalid token is given, channel id doesnt exist or
    user is not a member of the channel
    '''
    # Get the id of the user calling the function from their token
    user_id = wd.get_id_from_token(token)
    if user_id is None:
        raise AccessError(description="Invalid token given")
    # Get the data of the specified user
    user_data = wd.get_data_with_id('user data', user_id)
    return user_id, user_data

def is_handle_used(handle):
    '''
    Helper function that check if a handle is unused
    Returns true if the handle does nto belong to any user
    '''
    # Get data of all the users
    all_user_data = wd.get_data('user data')
    # Loop through all user data, if match occurs return Ture
    for user_data in all_user_data:
        if user_data['disp name'] == handle:
            return True
    # Return False here as no match was found
    return False

def is_valid_email(email):
    '''
    Helper function that checks if the email is
    a valid email
    Return a boolean value
    '''
    # Following the example linked in the specifications
    regex = r'^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
    return bool(re.search(regex, email))

# ************** user functions *****************8
def user_profile(token, u_id):
    '''
    Function that is used to get information about user profile
    Returns user data structure as specfified in the specifications
    '''
    # Get user id and user data from token and channel_id
    try:
        user_id, user_data = get_user_id_and_user_data(token)
    except Exception as err:
        raise err
    # Check the user id is correct
    if user_id != u_id:
        raise InputError(description="Incorrect user id given")
    # Convert user data to the user data type from the specifications
    user = {'u_id'          : user_data['id'],
            'email'         : user_data['email'],
            'name_first'    : user_data['first name'],
            'name_last'     : user_data['last name'],
            'handle_str'    : user_data['disp name']
           }
    return user

def user_profile_setname(token, name_first, name_last):
    '''
    Function that is used to change the users first and last name
    Returns nothing but mdifies the database in the website
    '''
    # Get user id and user data from token and channel_id
    try:
        user_id, user_data = get_user_id_and_user_data(token)
    except Exception as err:
        raise err
    # Check that the names given are valid inputs
    if not isinstance(name_first, str):
        raise InputError(description="first name must be a string")
    if not isinstance(name_last, str):
        raise InputError(description="last name must be a string")
    # Check that the names are not whitespace characters
    if isspace(name_first) or name_first is None:
        raise InputError(description="first name must not be invalid")
    if isspace(name_last) or name_last is None:
        raise InputError(description="last name must not be invalid")
    # Check first name is correct length
    if not name_first or len(name_first) > 50:
        raise InputError(description="First name has incorrect length")
    # Check last name is correct length
    if not name_last or len(name_last) > 50:
        raise InputError(description="Last name has incorrect length")

    # Set the new values of first and last name and save in database
    user_data['first name'] = name_first
    user_data['last name'] = name_last
    wd.set_data_with_id('user data', user_id, user_data)
    return {}

def user_profile_setemail(token, email):
    '''
    Function that is used to change the email of the user
    Returns nothing but mdifies the database in the website
    '''
    # Get user id and user data from token and channel_id
    try:
        user_id, user_data = get_user_id_and_user_data(token)
    except Exception as err:
        raise err
    # Checking if the email is valid
    if not isinstance(email, str):
        raise InputError(description="email must be a string")
    if not is_valid_email(email):
        raise InputError(description="Invalid email given")
    # Check email is unused
    all_user_data = wd.get_data("user data")
    if any(user_data['email'] == email for user_data in all_user_data):
        raise InputError(description="Email already belongs to a user")

    # Set the new values of first and last name and save in database
    user_data['email'] = email
    wd.set_data_with_id('user data', user_id, user_data)
    return {}

def user_profile_sethandle(token, handle_str):
    '''
    Function that is used to change the users display name
    Returns nothing but mdifies the database in the website
    '''
    # Get user id and user data from token and channel_id
    try:
        user_id, user_data = get_user_id_and_user_data(token)
    except Exception as err:
        raise err
    # Check valid handle is given
    if not isinstance(handle_str, str):
        raise InputError(description="Display name must be a string")
    # Check first name is correct length
    if len(handle_str) < 2 or len(handle_str) > 20:
        raise InputError(description="Display name is incorrect length")
    # Check it is unique
    if is_handle_used(handle_str):
        raise InputError(description="Display name already taken by a user")

    # Set the new values of first and last name and save in database
    user_data['disp name'] = handle_str
    wd.set_data_with_id('user data', user_id, user_data)
    return {}
